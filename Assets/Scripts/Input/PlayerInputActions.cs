//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Hunt"",
            ""id"": ""baeb6cb6-5ff5-4de6-bd12-6a04314ee4dd"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""ddd46fff-9e19-4773-9c9b-9e6b81091327"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""213fb0ed-c4fa-4470-b7df-27099e1e059f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pan"",
                    ""type"": ""Button"",
                    ""id"": ""b6673a7c-75a7-4164-9aff-9026817a199d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""520263bc-9a72-43b0-b8d9-d5a8ca494245"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dc19d91-6792-4ffa-8282-87dff433e8da"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""610939c2-f431-4d49-942c-d015503a707c"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""61582c44-79e5-4c97-a985-b1abc43b2657"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""62d08b5d-f438-465f-91ba-8ccc64ab8dab"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hunt
        m_Hunt = asset.FindActionMap("Hunt", throwIfNotFound: true);
        m_Hunt_Click = m_Hunt.FindAction("Click", throwIfNotFound: true);
        m_Hunt_Zoom = m_Hunt.FindAction("Zoom", throwIfNotFound: true);
        m_Hunt_Pan = m_Hunt.FindAction("Pan", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Hunt.enabled, "This will cause a leak and performance issues, PlayerInputActions.Hunt.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hunt
    private readonly InputActionMap m_Hunt;
    private List<IHuntActions> m_HuntActionsCallbackInterfaces = new List<IHuntActions>();
    private readonly InputAction m_Hunt_Click;
    private readonly InputAction m_Hunt_Zoom;
    private readonly InputAction m_Hunt_Pan;
    public struct HuntActions
    {
        private @PlayerInputActions m_Wrapper;
        public HuntActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Hunt_Click;
        public InputAction @Zoom => m_Wrapper.m_Hunt_Zoom;
        public InputAction @Pan => m_Wrapper.m_Hunt_Pan;
        public InputActionMap Get() { return m_Wrapper.m_Hunt; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HuntActions set) { return set.Get(); }
        public void AddCallbacks(IHuntActions instance)
        {
            if (instance == null || m_Wrapper.m_HuntActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HuntActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Pan.started += instance.OnPan;
            @Pan.performed += instance.OnPan;
            @Pan.canceled += instance.OnPan;
        }

        private void UnregisterCallbacks(IHuntActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Pan.started -= instance.OnPan;
            @Pan.performed -= instance.OnPan;
            @Pan.canceled -= instance.OnPan;
        }

        public void RemoveCallbacks(IHuntActions instance)
        {
            if (m_Wrapper.m_HuntActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHuntActions instance)
        {
            foreach (var item in m_Wrapper.m_HuntActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HuntActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HuntActions @Hunt => new HuntActions(this);
    public interface IHuntActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnPan(InputAction.CallbackContext context);
    }
}
